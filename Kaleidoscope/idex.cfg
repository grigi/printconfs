 
# Definition for the primary carriage (holding the primary extruder)
[dual_carriage]
# Connected to X stepper port
axis: x
step_pin: PB13
dir_pin: PB12
enable_pin: !PB14
microsteps: 32
rotation_distance: 40
endstop_pin: ^PC0
position_endstop: -68
position_min: -68
position_max: 230
homing_speed: 50
second_homing_speed: 5
homing_retract_dist: 4.0

[tmc2209 dual_carriage]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 0.580
hold_current: 0.500
stealthchop_threshold: 0

# The definition for the primary extruder
[extruder1]
# Connected to Y stepper port & Extruder heater
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16
#rotation_distance: 22.6789511
rotation_distance: 22.815
gear_ratio: 50:10
nozzle_diameter: 0.400
filament_diameter: 1.750
instantaneous_corner_velocity: 0.5
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
smooth_time: 0.5
pressure_advance: 0.055
# control: pid
# pid_Kp=14.058
# pid_Ki=0.372
# pid_Kd=132.846
min_temp: 0
max_temp: 300

[tmc2209 extruder1]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 0.580
hold_current: 0.580
stealthchop_threshold: 0

[heater_fan nozzle_cooling_fan1]
pin: yz:PC7
heater: extruder1

# Definition for the secondary carriage and extruder1
[stepper_x]
# Connected to Z stepper port
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 32
rotation_distance: 40
endstop_pin: ^PC1
position_endstop: 276
position_min: -10
position_max: 276
homing_speed: 50
second_homing_speed: 5
homing_retract_dist: 4.0

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.580
hold_current: 0.500
stealthchop_threshold: 0

[extruder]
# Connected to E stepper port & Bed heater
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD2
microsteps: 16
#rotation_distance: 22.6789511
rotation_distance: 22.815
gear_ratio: 50:10
nozzle_diameter: 0.400
filament_diameter: 1.750
instantaneous_corner_velocity: 0.5
heater_pin: PC9
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC3
smooth_time: 0.5
pressure_advance: 0.055
# control: pid
# pid_Kp: 22.2
# pid_Ki: 1.08
# pid_Kd: 114
min_temp: 0
max_temp: 300

[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.580
hold_current: 0.580
stealthchop_threshold: 0

[heater_fan nozzle_cooling_fan]
pin: PC7
heater: extruder

#######################################################################
# Tool alignment Calibration
#######################################################################

[gcode_macro calibrate_separation]
# YOU MUST CALIBRATE YOUR ROTATION_DISTANCE BEFORE THIS IS USEFUL!!!
# Configure this to draw 2 line segments perpendicular to the dual_carraige axis
# and 2 line segments parallel. Both sets of lines should have the same coordinate
# on the axis of the dual_carraige. If they don't print inline, adjust your endstop
# settings, or specify an offset on a carriage to line them up.
gcode:
    G28
    G90
    M83

    # Prime nozzles
    T0
    G1 E10 F120
    T1
    G1 E10 F120

    # X axis alignment
    T0 ; test T0
    G1 X120 Y140 Z.28 F4800
    G1 Y80 E6
    T1 ; test T1
    G1 X120 Y20 Z.28
    G1 Y80 E6

    # Y axis alignment
    T0 ; test T0
    G1 X140 Y160 Z.28 F4800
    G1 X80 E6
    T1 ; test T1
    G1 X20 Y160 Z.28
    G1 X80 E6

    # Lift Z
    G1 Z30
    T0


#######################################################################
# Tool changing
#######################################################################
[gcode_macro _PARK_extruder]
gcode:
    {% if "x" in printer.toolhead.homed_axes %}
    SAVE_GCODE_STATE NAME=park0
    {% if printer["gcode_macro M106"].swap_speed != -1 %}
      SET_FAN_SPEED FAN=fan_extruder SPEED=0
    {% endif %}
    G90
    G1 X273.5 F10800
    RESTORE_GCODE_STATE NAME=park0
    {% endif %}

[gcode_macro T0]
gcode:
    # Only do anything if the current tool is not T0
    {% if printer.toolhead.extruder != 'extruder' %}
      {% set fan_speed = printer["gcode_macro M106"].swap_speed %}
      {% if fan_speed != -1 %}
        SET_FAN_SPEED FAN=fan_extruder SPEED={fan_speed}
      {% else %}
        # Update core Klipper's fan speed to the fan speed of the active toolhead
        # Only do this if you have a sacrificial [fan] section
        M106.1 S{printer["fan_generic fan_extruder"].speed * 255}
      {% endif %}
      _PARK_{printer.toolhead.extruder}
      ACTIVATE_EXTRUDER EXTRUDER=extruder
      SET_DUAL_CARRIAGE CARRIAGE=0
      SET_GCODE_OFFSET X=2.05 Y=-1.23 Z=-0.49
      SET_INPUT_SHAPER SHAPER_FREQ_X=62.2 SHAPER_TYPE_X=mzv
    {% endif %}

[gcode_macro _PARK_extruder1]
gcode:
    {% if "x" in printer.toolhead.homed_axes %}
    SAVE_GCODE_STATE NAME=park1
    {% if printer["gcode_macro M106"].swap_speed != -1 %}
      SET_FAN_SPEED FAN=fan_extruder1 SPEED=0
    {% endif %}
    G90
    G1 X-66 F10800
    RESTORE_GCODE_STATE NAME=park1
    {% endif %}

[gcode_macro T1]
gcode:
    # Only do anything if the current tool is not T1
    {% if printer.toolhead.extruder != 'extruder1' %}
      {% set fan_speed = printer["gcode_macro M106"].swap_speed %}
      {% if fan_speed != -1 %}
        SET_FAN_SPEED FAN=fan_extruder1 SPEED={fan_speed}
      {% else %}
        # Update core Klipper's fan speed to the fan speed of the active toolhead
        # Only do this if you have a sacrificial [fan] section
        M106.1 S{printer["fan_generic fan_extruder1"].speed * 255}
      {% endif %}
      _PARK_{printer.toolhead.extruder}
      ACTIVATE_EXTRUDER EXTRUDER=extruder1
      SET_DUAL_CARRIAGE CARRIAGE=1
      SET_GCODE_OFFSET X=0 Y=0 Z=0
      SET_INPUT_SHAPER SHAPER_FREQ_X=43.6 SHAPER_TYPE_X=zv
    {% endif %}


#######################################################################
# Part cooling fans
#######################################################################

# The following is for if your carraiges have their own part cooling fans.
# If your printer only has one part cooling fan, don't copy this section

# Sacrificial "main" fan
# It is switching on an unused pin
# This is so that fan speed is reported correctly on the display and klipper-api(moonraker) interfaces
# If you don't care about that, you can remove this and the "rename_existing" sections in M106 & M107
[fan]
pin: rpi:gpio20

[fan_generic fan_extruder]
pin: PC6

[fan_generic fan_extruder1]
pin: yz:PC6

[gcode_macro M106]
# Only rename_existing if you have a sacrificial [fan] section
rename_existing: M106.1
# The variable that controls fan speed swopping if not specifying P parameter
# -1 means the control is disabled, a value of 0-1 is the requested fan speed.
# Access via {printer["gcode_macro M106"].swap_speed}
variable_swap_speed: -1
gcode:
    {% set s = [[params.S|default(255)|int, 255]|min, 0]|max %}
    {% set p = params.P|default(-1)|int %}
    {% set speed = s / 255 %}

    # Set speed to -1 by default
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE=-1

    {% if p == -1 %}
      # Set current active extruder fan
      {% if speed == 0 %}
        # Always turn off al fans if S0 is specified without a specific fan
        SET_FAN_SPEED FAN=fan_extruder SPEED=0
        SET_FAN_SPEED FAN=fan_extruder1 SPEED=0
      {% else %}
        # Opt into fan speed swop control
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE={speed}
        SET_FAN_SPEED FAN=fan_{printer.toolhead.extruder} SPEED={speed}
      {% endif %}
    {% else %}
      # Set specified active extruder fan
      {% if p == 0 %}
        SET_FAN_SPEED FAN=fan_extruder SPEED={speed}
      {% else %}
        SET_FAN_SPEED FAN=fan_extruder1 SPEED={speed}
      {% endif %}     
    {% endif %}

    # Update core Klipper's fan speed
    # Only do this if you have a sacrificial [fan] section
    M106.1 S{s}

[gcode_macro M107]
rename_existing: M107.1
gcode:
    {% set p = params.P|default(-1)|int %}
    M106 S0 P{p}
